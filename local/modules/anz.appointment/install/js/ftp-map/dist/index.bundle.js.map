{"version":3,"file":"index.bundle.js","sources":["../src/ftp-map.js"],"sourcesContent":["/**\r\n * ==================================================\r\n * Developer: Alexey Nazarov\r\n * E-mail: jc1988x@gmail.com\r\n * Copyright (c) 2019 - 2022\r\n * ==================================================\r\n * \"Bit.Umc - Bitrix integration\" - admin.js\r\n * 10.07.2022 22:37\r\n * ==================================================\r\n */\r\n'use strict';\r\n\r\nimport \"./style.css\";\r\nimport \"ui.buttons\";\r\nimport {Extension} from 'main.core';\r\nimport { PopupManager } from 'main.popup';\r\n\r\nexport const FtpMap = {\r\n    controller: 'anz:appointment.oneCController',\r\n    options: Extension.getSettings('anz.appointment.ftp-map'),\r\n    ftpMapSaveBtnId: 'ftp-map-save-btn',\r\n    ftpMapFormId: `ftp-map-form-${Math.round(Math.random() * 10000)}`,\r\n    getClinicsBtnId: 'ftp-map-get-clinics-btn',\r\n    createdHandleInputRows: 0,\r\n\r\n    init: function(inputId){\r\n        this.optionInput = BX(inputId);\r\n        this.valueNode   = BX(`${inputId}_block`)\r\n        this.changeBtn   = BX('ftp-map-change-btn');\r\n        this.changeBtn && this.changeBtn.addEventListener('click', () => {\r\n            this.showFtpMapPopup();\r\n        });\r\n    },\r\n\r\n    getClinics: function () {\r\n        this.getClinicsBtn = BX(this.getClinicsBtnId);\r\n        this.getClinicsBtn && this.getClinicsBtn.classList.add('ui-btn-wait');\r\n        BX.ajax.runAction(`${this.controller}.getClinics`, {\r\n            data: this.createFormData()\r\n        }).then(response => {\r\n            if (response.status === 'success')\r\n            {\r\n                this.renderInputsFromOneCData(response.data);\r\n            }\r\n            else\r\n            {\r\n                throw new Error('Something went wrong. Unknown response status - '.response.status);\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n            this.getClinicsBtn && this.getClinicsBtn.classList.remove('ui-btn-wait');\r\n        })\r\n    },\r\n\r\n    createFormData: function(argsObject = {}) {\r\n        const formData = new FormData();\r\n\r\n        for (let key in argsObject)\r\n        {\r\n            formData.set(key, argsObject[key]);\r\n        }\r\n        formData.set('sessid', BX.bitrix_sessid());\r\n        formData.set(this.options.ignoreFtpOptionKey, 'Y');\r\n\r\n        return formData;\r\n    },\r\n\r\n    showFtpMapPopup() {\r\n        this.ftpMapForm = this.createFtpMapForm();\r\n        this.ftpMapPopup = PopupManager.create(\r\n            \"ftp-map-popup\",\r\n            null,\r\n            {\r\n                content: this.ftpMapForm,\r\n                width: 700,\r\n                closeIcon: true,\r\n                titleBar: '',\r\n                closeByEsc: true,\r\n                overlay: {\r\n                    backgroundColor: 'black',\r\n                    opacity: 500\r\n                },\r\n                buttons: [\r\n                    new BX.PopupWindowButton({\r\n                        text: BX.message('SAVE_TEXT'),\r\n                        className: 'ui-btn ui-btn-primary',\r\n                        id: this.ftpMapSaveBtnId,\r\n                        events: {\r\n                            click: () => {\r\n                                this.saveFtpMapValue();\r\n                                this.ftpMapPopup.close();\r\n                            }\r\n                        }\r\n                    }),\r\n                ],\r\n            }\r\n        );\r\n        this.ftpMapPopup.show();\r\n    },\r\n\r\n    createFtpMapForm() {\r\n        return BX.create('form', {\r\n            props: {\r\n                id: this.ftpMapFormId,\r\n                classList: 'ftp-map-changing-form'\r\n            },\r\n            children: [\r\n                BX.create('table',{\r\n                    children: [\r\n                        BX.create('tbody',{\r\n                            children: [\r\n                                BX.create('tr',{\r\n                                    props: {\r\n                                        classList: 'btn-row'\r\n                                    },\r\n                                    children: [\r\n                                        BX.create('td',{\r\n                                            children: [\r\n                                                BX.create('button',{\r\n                                                    props: {\r\n                                                        classList: 'ui-btn ui-btn-success',\r\n                                                        type: 'button'\r\n                                                    },\r\n                                                    text: BX.message('HANDLE_INPUT'),\r\n                                                    events: {\r\n                                                        click: (e) => {\r\n                                                            const tbody  = e.target.closest('tbody');\r\n                                                            const btnRow = e.target.closest('tr');\r\n\r\n                                                            if (btnRow && tbody)\r\n                                                            {\r\n                                                                tbody.append(this.createHandleInputRow());\r\n                                                                btnRow.innerHTML = '';\r\n                                                                btnRow.append(this.createHandleInputMoreBtn(tbody));\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }),\r\n                                            ]\r\n                                        }),\r\n                                        BX.create('td',{\r\n                                            children: [\r\n                                                BX.create('button',{\r\n                                                    props: {\r\n                                                        classList: 'ui-btn ui-btn-success',\r\n                                                        id: this.getClinicsBtnId,\r\n                                                        type: 'button'\r\n                                                    },\r\n                                                    text: BX.message('LOAD_FROM_1C'),\r\n                                                    events: {\r\n                                                        click: () => this.getClinics()\r\n                                                    }\r\n                                                }),\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    },\r\n\r\n    saveFtpMapValue() {\r\n        if (this.ftpMapForm)\r\n        {\r\n            const formData = new FormData(this.ftpMapForm);\r\n            const valueObj = {};\r\n\r\n            let lastGuid    = null;\r\n            let guidCounter = 0;\r\n            formData.forEach(function(value, key){\r\n                if (key.indexOf('guid_') === 0)\r\n                {\r\n                    guidCounter        = key.split('_')[1];\r\n                    lastGuid           = value;\r\n                    valueObj[lastGuid] = null;\r\n                }\r\n                else if(key.indexOf('path_') === 0)\r\n                {\r\n                    let pathCounter = key.split('_')[1];\r\n                    if (pathCounter === guidCounter)\r\n                    {\r\n                        valueObj[lastGuid] = value;\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.renderOptionValue(valueObj);\r\n\r\n            this.optionInput && (this.optionInput.value = JSON.stringify(valueObj));\r\n        }\r\n    },\r\n\r\n    renderOptionValue(valueObj){\r\n        if (BX.type.isDomNode(this.valueNode))\r\n        {\r\n            const currentRows = this.valueNode.querySelectorAll('.table-value-row');\r\n            currentRows.length && currentRows.forEach(row => {\r\n                row.remove();\r\n            });\r\n\r\n            const tbody = this.valueNode.querySelector('tbody');\r\n            if (tbody)\r\n            {\r\n                for (const key in valueObj)\r\n                {\r\n                    tbody.prepend(\r\n                        BX.create('tr', {\r\n                            props: {\r\n                                classList: 'table-value-row',\r\n                            },\r\n                            children: [\r\n                                BX.create('td', {\r\n                                    text: key\r\n                                }),\r\n                                BX.create('td', {\r\n                                    text: valueObj[key]\r\n                                })\r\n                            ]\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    createHandleInputRow() {\r\n        if (this.createdHandleInputRows >= 30)\r\n        {\r\n            return '';\r\n        }\r\n\r\n        this.createdHandleInputRows++;\r\n        return BX.create('tr', {\r\n            children: [\r\n                BX.create('td', {\r\n                    children: [\r\n                        BX.create('input', {\r\n                            attrs: {\r\n                                type: 'text',\r\n                                name: `guid_${this.createdHandleInputRows}`,\r\n                                placeholder: BX.message('GUID_HINT')\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                BX.create('td', {\r\n                    children: [\r\n                        BX.create('input', {\r\n                            attrs: {\r\n                                type: 'text',\r\n                                name: `path_${this.createdHandleInputRows}`,\r\n                                placeholder: BX.message('PATH_HINT')\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    },\r\n\r\n    createHandleInputMoreBtn(parentNode) {\r\n        return BX.create('td', {\r\n            attrs: {\r\n                colspan: '2'\r\n            },\r\n            children: [\r\n                BX.create('button',{\r\n                    props: {\r\n                        classList: 'ui-btn ui-btn-success-dark',\r\n                        type: 'button'\r\n                    },\r\n                    text: BX.message('ADD_TEXT'),\r\n                    events: {\r\n                        click: () => parentNode && parentNode.append(this.createHandleInputRow())\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    },\r\n\r\n    renderInputsFromOneCData(clinics) {\r\n        if ((typeof clinics === 'object') && this.getClinicsBtn)\r\n        {\r\n            const tbody  = this.getClinicsBtn.closest('tbody');\r\n            const btnRow = this.getClinicsBtn.closest('tr');\r\n\r\n            if (btnRow && tbody)\r\n            {\r\n                btnRow.innerHTML = '';\r\n                let counter = 0;\r\n                for (const key in clinics) {\r\n                    counter++;\r\n                    tbody.append(this.createImportedInputRow(clinics[key], counter));\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    createImportedInputRow(clinic, counter) {\r\n        return BX.create('tr', {\r\n            children: [\r\n                BX.create('td', {\r\n                    children: [\r\n                        BX.create('div', {\r\n                            props:{\r\n                                className: 'ftp-map-changing-form-table-clinic-name'\r\n                            },\r\n                            text: clinic.name\r\n                        }),\r\n                        BX.create('input', {\r\n                            attrs: {\r\n                                type: 'text',\r\n                                name: `guid_${counter}`,\r\n                                readonly: true,\r\n                                value: clinic.uid\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                BX.create('td', {\r\n                    children: [\r\n                        BX.create('input', {\r\n                            attrs: {\r\n                                type: 'text',\r\n                                name: `path_${counter}`,\r\n                                placeholder: BX.message('PATH_HINT')\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n};"],"names":["FtpMap","controller","options","Extension","getSettings","ftpMapSaveBtnId","ftpMapFormId","Math","round","random","getClinicsBtnId","createdHandleInputRows","init","inputId","optionInput","BX","valueNode","changeBtn","this","addEventListener","_this","showFtpMapPopup","getClinics","getClinicsBtn","classList","add","ajax","runAction","data","createFormData","then","response","status","Error","_this2","renderInputsFromOneCData","e","console","log","remove","argsObject","formData","FormData","key","set","bitrix_sessid","ignoreFtpOptionKey","ftpMapForm","createFtpMapForm","ftpMapPopup","PopupManager","create","content","width","closeIcon","titleBar","closeByEsc","overlay","backgroundColor","opacity","buttons","PopupWindowButton","text","message","className","id","events","click","_this3","saveFtpMapValue","close","show","props","children","type","tbody","target","closest","btnRow","append","_this4","createHandleInputRow","innerHTML","createHandleInputMoreBtn","valueObj","lastGuid","guidCounter","forEach","value","indexOf","split","renderOptionValue","JSON","stringify","isDomNode","currentRows","querySelectorAll","length","row","querySelector","prepend","attrs","name","placeholder","parentNode","colspan","_this5","clinics","babelHelpers","counter","createImportedInputRow","clinic","readonly","uid"],"mappings":"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"}