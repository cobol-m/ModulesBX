{"version":3,"file":"admin.bundle.js","sources":["../src/admin.js"],"sourcesContent":["/**\r\n * ==================================================\r\n * Developer: Alexey Nazarov\r\n * E-mail: jc1988x@gmail.com\r\n * Copyright (c) 2019 - 2022\r\n * ==================================================\r\n * \"Bit.Umc - Bitrix integration\" - admin.js\r\n * 10.07.2022 22:37\r\n * ==================================================\r\n */\r\n'use strict';\r\n\r\nimport \"./admin.css\";\r\nimport \"color_picker\";\r\nimport {Extension} from 'main.core';\r\n\r\nexport const Admin = {\r\n    ajaxUrl: '/bitrix/services/main/ajax.php',\r\n    controller: 'anz:appointment.oneCController',\r\n    requestParams: {\r\n        method: 'POST',\r\n        body: '',\r\n    },\r\n    options: Extension.getSettings('anz.appointment.admin'),\r\n\r\n    deleteRecord: function (id, gridId, orderUid) {\r\n        this.runAction(id, gridId, orderUid, 'deleteOrder')\r\n    },\r\n\r\n    updateRecord: function (id, gridId, orderUid) {\r\n        this.runAction(id, gridId, orderUid, 'getOrderStatus')\r\n    },\r\n\r\n    runAction: function (id, gridId, orderUid, actionToCall) {\r\n        const grid = BX.Main.gridManager.getInstanceById(gridId);\r\n        grid && grid.tableFade();\r\n\r\n        const action = `${this.controller}.${actionToCall}`;\r\n\r\n        this.requestParams.body = this.createFormData({id, orderUid});\r\n\r\n        fetch(`${this.ajaxUrl}?action=${action}`, this.requestParams)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }else{\r\n                    console.log(`Error. Status code ${response.status}`);\r\n                }\r\n            })\r\n            .then(json => {\r\n                if (json.status === 'error'){\r\n                    //console.log(json);\r\n                }\r\n            })\r\n            .catch(e => console.log(e))\r\n            .finally(() => {\r\n                if (grid)\r\n                {\r\n                    const reloadParams = { apply_filter: 'Y', clear_nav: 'N' };\r\n                    const pageParams = {[gridId]: `page-${this.getGridCurrentPage(grid)}`};\r\n                    grid.baseUrl = BX.Grid.Utils.addUrlParams(grid.baseUrl, pageParams);\r\n                    grid.reloadTable('POST', reloadParams);\r\n                }\r\n            })\r\n    },\r\n\r\n    createFormData: function(argsObject) {\r\n        const formData = new FormData();\r\n\r\n        for (let key in argsObject)\r\n        {\r\n            if (argsObject.hasOwnProperty(key))\r\n            {\r\n                formData.set(key, argsObject[key]);\r\n            }\r\n        }\r\n        formData.set('sessid', BX.bitrix_sessid());\r\n\r\n        return formData;\r\n    },\r\n\r\n    getGridCurrentPage(gridInstance) {\r\n        let curPage = 0;\r\n        if (BX.type.isDomNode(gridInstance?.data?.pagination))\r\n        {\r\n            const curPageNode = gridInstance.data.pagination.querySelector('.main-ui-pagination-active');\r\n            if (curPageNode){\r\n                curPage = !isNaN(parseInt(curPageNode.textContent)) ? parseInt(curPageNode.textContent) : 0;\r\n            }\r\n        }\r\n        return curPage;\r\n    },\r\n\r\n    bindColorPickerToNode: function (nodeId, inputId, defaultColor = '') {\r\n        const element = BX(nodeId);\r\n        const input = BX(inputId);\r\n        BX.bind(element, 'click', function () {\r\n            new BX.ColorPicker({\r\n                bindElement: element,\r\n                defaultColor: defaultColor ?? '#FFFFFF',\r\n                allowCustomColor: true,\r\n                onColorSelected: function (color) {\r\n                    input.value = color;\r\n                },\r\n                popupOptions: {\r\n                    angle: true,\r\n                    autoHide: true,\r\n                    closeByEsc: true,\r\n                    events: {\r\n                        onPopupClose: function () {}\r\n                    }\r\n                }\r\n            }).open();\r\n        })\r\n    },\r\n\r\n    activateInputs: function(){\r\n        const inputs = {\r\n            customMainBtnCheckbox: BX(this.options['customMainBtnCheckboxId'])\r\n        };\r\n\r\n        for (let key in inputs){\r\n            if (inputs.hasOwnProperty(key))\r\n            {\r\n                switch (key) {\r\n                    case \"customMainBtnCheckbox\":\r\n                        if(inputs[key]){\r\n                            this.changeInputsState(inputs[key]);\r\n                            inputs[key].addEventListener('change', () => this.changeInputsState(inputs[key]))\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    changeInputsState: function(checkbox){\r\n        const textInput = BX(this.options['customMainBtnInputId']);\r\n        const bgColorInput = BX(this.options['startBtnBgColorInput']);\r\n        const textColorInput = BX(this.options['startBtnTextColorInput']);\r\n\r\n        if (checkbox.checked)\r\n        {\r\n            textInput.removeAttribute('disabled');\r\n            bgColorInput.setAttribute('disabled', true);\r\n            textColorInput.setAttribute('disabled', true);\r\n        }\r\n        else\r\n        {\r\n            textInput.setAttribute('disabled', true);\r\n            bgColorInput.removeAttribute('disabled');\r\n            textColorInput.removeAttribute('disabled');\r\n        }\r\n    },\r\n};"],"names":["Admin","ajaxUrl","controller","requestParams","method","body","options","getSettings","deleteRecord","id","gridId","orderUid","runAction","updateRecord","actionToCall","grid","BX","Main","gridManager","getInstanceById","tableFade","action","this","createFormData","fetch","then","response","ok","json","console","log","status","e","pageParams","_this","getGridCurrentPage","baseUrl","Grid","Utils","addUrlParams","reloadTable","apply_filter","clear_nav","argsObject","formData","FormData","key","hasOwnProperty","set","bitrix_sessid","gridInstance","curPage","type","isDomNode","data","_gridInstance$data","pagination","curPageNode","querySelector","isNaN","parseInt","textContent","bindColorPickerToNode","nodeId","inputId","defaultColor","element","input","bind","ColorPicker","bindElement","allowCustomColor","onColorSelected","color","value","popupOptions","angle","autoHide","closeByEsc","events","onPopupClose","open","activateInputs","inputs","customMainBtnCheckbox","_this2","changeInputsState","addEventListener","checkbox","textInput","bgColorInput","textColorInput","checked","removeAttribute","setAttribute"],"mappings":"iFAgBaA,EAAQ,CACjBC,QAAS,iCACTC,WAAY,iCACZC,cAAe,CACXC,OAAQ,OACRC,KAAM,IAEVC,qBAAmBC,YAAY,yBAE/BC,aAAc,SAAUC,EAAIC,EAAQC,QAC3BC,UAAUH,EAAIC,EAAQC,EAAU,gBAGzCE,aAAc,SAAUJ,EAAIC,EAAQC,QAC3BC,UAAUH,EAAIC,EAAQC,EAAU,mBAGzCC,UAAW,SAAUH,EAAIC,EAAQC,EAAUG,cACjCC,EAAOC,GAAGC,KAAKC,YAAYC,gBAAgBT,GACjDK,GAAQA,EAAKK,gBAEPC,YAAYC,KAAKpB,uBAAcY,QAEhCX,cAAcE,KAAOiB,KAAKC,eAAe,CAACd,GAAAA,EAAIE,SAAAA,IAEnDa,gBAASF,KAAKrB,2BAAkBoB,GAAUC,KAAKnB,eAC1CsB,MAAK,SAAAC,MACEA,EAASC,UACFD,EAASE,OAEhBC,QAAQC,iCAA0BJ,EAASK,YAGlDN,MAAK,SAAAG,GACEA,EAAKG,iBAIN,SAAAC,UAAKH,QAAQC,IAAIE,eACf,cACDjB,EACJ,KAEUkB,iCAAevB,iBAAiBwB,EAAKC,mBAAmBpB,KAC9DA,EAAKqB,QAAUpB,GAAGqB,KAAKC,MAAMC,aAAaxB,EAAKqB,QAASH,GACxDlB,EAAKyB,YAAY,OAHI,CAAEC,aAAc,IAAKC,UAAW,WAQrEnB,eAAgB,SAASoB,OACfC,EAAW,IAAIC,aAEhB,IAAIC,KAAOH,EAERA,EAAWI,eAAeD,IAE1BF,EAASI,IAAIF,EAAKH,EAAWG,WAGrCF,EAASI,IAAI,SAAUhC,GAAGiC,iBAEnBL,GAGXT,4BAAmBe,SACXC,EAAU,KACVnC,GAAGoC,KAAKC,UAAUH,MAAAA,aAAAA,EAAcI,yBAAdC,EAAoBC,YAC1C,KACUC,EAAcP,EAAaI,KAAKE,WAAWE,cAAc,8BAC3DD,IACAN,EAAWQ,MAAMC,SAASH,EAAYI,cAAoD,EAApCD,SAASH,EAAYI,qBAG5EV,GAGXW,sBAAuB,SAAUC,EAAQC,OAASC,yDAAe,GACvDC,EAAUlD,GAAG+C,GACbI,EAAQnD,GAAGgD,GACjBhD,GAAGoD,KAAKF,EAAS,SAAS,eAClBlD,GAAGqD,YAAY,CACfC,YAAaJ,EACbD,aAAcA,MAAAA,EAAAA,EAAgB,UAC9BM,kBAAkB,EAClBC,gBAAiB,SAAUC,GACvBN,EAAMO,MAAQD,GAElBE,aAAc,CACVC,OAAO,EACPC,UAAU,EACVC,YAAY,EACZC,OAAQ,CACJC,aAAc,iBAGvBC,WAIXC,eAAgB,sBACNC,EAAS,CACXC,sBAAuBpE,GAAGM,KAAKhB,QAAL,qCAGrBwC,MACDqC,EAAOpC,eAAeD,IAGb,0BADDA,EAEGqC,EAAOrC,KACNuC,EAAKC,kBAAkBH,EAAOrC,IAC9BqC,EAAOrC,GAAKyC,iBAAiB,UAAU,kBAAMF,EAAKC,kBAAkBH,EAAOrC,aAP1F,IAAIA,KAAOqC,IAAPrC,IAkBbwC,kBAAmB,SAASE,OAClBC,EAAYzE,GAAGM,KAAKhB,QAAL,sBACfoF,EAAe1E,GAAGM,KAAKhB,QAAL,sBAClBqF,EAAiB3E,GAAGM,KAAKhB,QAAL,wBAEtBkF,EAASI,SAETH,EAAUI,gBAAgB,YAC1BH,EAAaI,aAAa,YAAY,GACtCH,EAAeG,aAAa,YAAY,KAIxCL,EAAUK,aAAa,YAAY,GACnCJ,EAAaG,gBAAgB,YAC7BF,EAAeE,gBAAgB"}